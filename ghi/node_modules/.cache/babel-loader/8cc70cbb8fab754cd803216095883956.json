{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport const recipeHuntApi = createApi({\n  reducerPath: \"recipeHuntApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: process.env.REACT_APP_API_HOST\n  }),\n  tagTypes: [\"Account\", \"Favorites\", \"Ingredient\", \"Recipes\", \"Ratings\"],\n  endpoints: builder => ({\n    getAccount: builder.query({\n      query: () => ({\n        url: `/token`,\n        credentials: \"include\"\n      }),\n      transformResponse: response => response ? response.account : null,\n      providesTags: [\"Account\"]\n    }),\n    logout: builder.mutation({\n      query: () => ({\n        url: \"/token\",\n        method: \"DELETE\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [{\n        type: \"Account\"\n      }, {\n        type: \"Favorites\",\n        id: \"mine\"\n      }, {\n        type: \"Ingredient\",\n        id: \"mine\"\n      }]\n    }),\n    signup: builder.mutation({\n      query: body => ({\n        url: `/api/accounts`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n      invalidatesTags: [\"Account\", \"Favorites\", \"Ingredient\"]\n    }),\n    login: builder.mutation({\n      query: _ref => {\n        let {\n          username,\n          password\n        } = _ref;\n        const body = new FormData();\n        body.append(\"username\", username);\n        body.append(\"password\", password);\n        return {\n          url: `/token`,\n          method: \"POST\",\n          body,\n          credentials: \"include\"\n        };\n      },\n      invalidatesTags: [\"Account\", \"Favorites\", \"Ingredient\"]\n    }),\n    getIngredientByAccount: builder.query({\n      query: () => ({\n        url: `/api/ingredients/mine`,\n        credentials: \"include\"\n      }),\n      providesTags: [\"Ingredient\"],\n      transformResponse: response => response.ingredients\n    }),\n    createIngredient: builder.mutation({\n      query: body => ({\n        url: `/api/ingredients`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n      invalidatesTags: [\"Ingredient\", \"Account\"]\n    }),\n    deleteIngredient: builder.mutation({\n      query: ingredient_id => ({\n        url: `/api/ingredients/${ingredient_id}`,\n        method: \"DELETE\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"Ingredient\", \"Account\"]\n    }),\n    updateIngredient: builder.mutation({\n      query: _ref2 => {\n        let {\n          body,\n          ingredient_id\n        } = _ref2;\n        return {\n          url: `/api/ingredients/${ingredient_id}`,\n          body,\n          method: \"PUT\",\n          credentials: \"include\"\n        };\n      },\n      transformResponse: response => response.ingredients,\n      invalidatesTags: [\"Ingredient\", \"Account\"]\n    }),\n    getRecipeById: builder.query({\n      query: recipeId => ({\n        url: `/api/tasty-recipes/${recipeId}`,\n        credentials: \"include\"\n      })\n    }),\n    getRecipes: builder.query({\n      query: () => ({\n        url: \"/api/tasty-recipes\",\n        credentials: \"include\"\n      }),\n      providesTags: [\"Recipes\"],\n      transformResponse: response => response.recipes\n    }),\n    getFavorites: builder.query({\n      query: () => ({\n        url: \"/api/favorites/mine\",\n        credentials: \"include\"\n      }),\n      transformResponse: response => response.favorites,\n      providesTags: [\"Favorites\"]\n    }),\n    favorites: builder.mutation({\n      query: body => ({\n        url: `/api/favorites`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n      invalidatesTags: [\"Favorites\", \"Account\"]\n    }),\n    deleteFavorites: builder.mutation({\n      query: favorite_id => ({\n        url: `/api/favorites/${favorite_id}`,\n        method: \"DELETE\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"Favorites\", \"Account\"]\n    }),\n    getAllRatings: builder.query({\n      query: recipe_id => ({\n        url: `/api/recipes/${recipe_id}/ratings`,\n        credentials: \"include\"\n      }),\n      transformResponse: response => response.ratings,\n      providesTags: [\"Ratings\"]\n    }),\n    ratings: builder.mutation({\n      query: _ref3 => {\n        let {\n          body,\n          recipe_id\n        } = _ref3;\n        return {\n          url: `/api/recipes/${recipe_id}/ratings`,\n          method: \"POST\",\n          body,\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        };\n      },\n      invalidatesTags: [\"Ratings\"]\n    })\n  })\n});\nexport const {\n  useGetAccountQuery,\n  useLogoutMutation,\n  useLoginMutation,\n  useSignupMutation,\n  useGetIngredientByAccountQuery,\n  useCreateIngredientMutation,\n  useDeleteIngredientMutation,\n  useUpdateIngredientMutation,\n  useGetRecipeByIdQuery,\n  useGetRecipesQuery,\n  useGetFavoritesQuery,\n  useFavoritesMutation,\n  useDeleteFavoritesMutation,\n  useRatingsMutation,\n  useGetAllRatingsQuery\n} = recipeHuntApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","recipeHuntApi","reducerPath","baseQuery","baseUrl","process","env","REACT_APP_API_HOST","tagTypes","endpoints","builder","getAccount","query","url","credentials","transformResponse","response","account","providesTags","logout","mutation","method","invalidatesTags","type","id","signup","body","headers","login","username","password","FormData","append","getIngredientByAccount","ingredients","createIngredient","deleteIngredient","ingredient_id","updateIngredient","getRecipeById","recipeId","getRecipes","recipes","getFavorites","favorites","deleteFavorites","favorite_id","getAllRatings","recipe_id","ratings","useGetAccountQuery","useLogoutMutation","useLoginMutation","useSignupMutation","useGetIngredientByAccountQuery","useCreateIngredientMutation","useDeleteIngredientMutation","useUpdateIngredientMutation","useGetRecipeByIdQuery","useGetRecipesQuery","useGetFavoritesQuery","useFavoritesMutation","useDeleteFavoritesMutation","useRatingsMutation","useGetAllRatingsQuery"],"sources":["/app/src/app/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const recipeHuntApi = createApi({\n  reducerPath: \"recipeHuntApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: process.env.REACT_APP_API_HOST,\n  }),\n  tagTypes: [\"Account\", \"Favorites\", \"Ingredient\", \"Recipes\", \"Ratings\"],\n  endpoints: (builder) => ({\n    getAccount: builder.query({\n      query: () => ({\n        url: `/token`,\n        credentials: \"include\",\n      }),\n      transformResponse: (response) => (response ? response.account : null),\n      providesTags: [\"Account\"],\n    }),\n    logout: builder.mutation({\n      query: () => ({\n        url: \"/token\",\n        method: \"DELETE\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\n        { type: \"Account\" },\n        { type: \"Favorites\", id: \"mine\" },\n        { type: \"Ingredient\", id: \"mine\" },\n      ],\n    }),\n    signup: builder.mutation({\n      query: (body) => ({\n        url: `/api/accounts`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }),\n      invalidatesTags: [\"Account\", \"Favorites\", \"Ingredient\"],\n    }),\n    login: builder.mutation({\n      query: ({ username, password }) => {\n        const body = new FormData();\n        body.append(\"username\", username);\n        body.append(\"password\", password);\n        return {\n          url: `/token`,\n          method: \"POST\",\n          body,\n          credentials: \"include\",\n        };\n      },\n      invalidatesTags: [\"Account\", \"Favorites\", \"Ingredient\"],\n    }),\n    getIngredientByAccount: builder.query({\n      query: () => ({\n        url: `/api/ingredients/mine`,\n        credentials: \"include\",\n      }),\n      providesTags: [\"Ingredient\"],\n      transformResponse: (response) => response.ingredients,\n    }),\n    createIngredient: builder.mutation({\n      query: (body) => ({\n        url: `/api/ingredients`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }),\n      invalidatesTags: [\"Ingredient\", \"Account\"],\n    }),\n    deleteIngredient: builder.mutation({\n      query: (ingredient_id) => ({\n        url: `/api/ingredients/${ingredient_id}`,\n        method: \"DELETE\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"Ingredient\", \"Account\"],\n    }),\n    updateIngredient: builder.mutation({\n      query: ({ body, ingredient_id }) => ({\n        url: `/api/ingredients/${ingredient_id}`,\n        body,\n        method: \"PUT\",\n        credentials: \"include\",\n      }),\n      transformResponse: (response) => response.ingredients,\n      invalidatesTags: [\"Ingredient\", \"Account\"],\n    }),\n    getRecipeById: builder.query({\n      query: (recipeId) => ({\n        url: `/api/tasty-recipes/${recipeId}`,\n        credentials: \"include\",\n      }),\n    }),\n    getRecipes: builder.query({\n      query: () => ({\n        url: \"/api/tasty-recipes\",\n        credentials: \"include\",\n      }),\n      providesTags: [\"Recipes\"],\n      transformResponse: (response) => response.recipes,\n    }),\n    getFavorites: builder.query({\n      query: () => ({\n        url: \"/api/favorites/mine\",\n        credentials: \"include\",\n      }),\n      transformResponse: (response) => response.favorites,\n      providesTags: [\"Favorites\"],\n    }),\n    favorites: builder.mutation({\n      query: (body) => ({\n        url: `/api/favorites`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }),\n      invalidatesTags: [\"Favorites\", \"Account\"],\n    }),\n    deleteFavorites: builder.mutation({\n      query: (favorite_id) => ({\n        url: `/api/favorites/${favorite_id}`,\n        method: \"DELETE\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"Favorites\", \"Account\"],\n    }),\n    getAllRatings: builder.query({\n      query: (recipe_id) => ({\n        url: `/api/recipes/${recipe_id}/ratings`,\n        credentials: \"include\",\n      }),\n      transformResponse: (response) => response.ratings,\n      providesTags: [\"Ratings\"],\n    }),\n    ratings: builder.mutation({\n      query: ({ body, recipe_id }) => ({\n        url: `/api/recipes/${recipe_id}/ratings`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }),\n      invalidatesTags: [\"Ratings\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetAccountQuery,\n  useLogoutMutation,\n  useLoginMutation,\n  useSignupMutation,\n  useGetIngredientByAccountQuery,\n  useCreateIngredientMutation,\n  useDeleteIngredientMutation,\n  useUpdateIngredientMutation,\n  useGetRecipeByIdQuery,\n  useGetRecipesQuery,\n  useGetFavoritesQuery,\n  useFavoritesMutation,\n  useDeleteFavoritesMutation,\n  useRatingsMutation,\n  useGetAllRatingsQuery,\n} = recipeHuntApi;\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAAC;EACrCG,WAAW,EAAE,eADwB;EAErCC,SAAS,EAAEH,cAAc,CAAC;IACxBI,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;EADG,CAAD,CAFY;EAKrCC,QAAQ,EAAE,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,EAAuC,SAAvC,EAAkD,SAAlD,CAL2B;EAMrCC,SAAS,EAAGC,OAAD,KAAc;IACvBC,UAAU,EAAED,OAAO,CAACE,KAAR,CAAc;MACxBA,KAAK,EAAE,OAAO;QACZC,GAAG,EAAG,QADM;QAEZC,WAAW,EAAE;MAFD,CAAP,CADiB;MAKxBC,iBAAiB,EAAGC,QAAD,IAAeA,QAAQ,GAAGA,QAAQ,CAACC,OAAZ,GAAsB,IALxC;MAMxBC,YAAY,EAAE,CAAC,SAAD;IANU,CAAd,CADW;IASvBC,MAAM,EAAET,OAAO,CAACU,QAAR,CAAiB;MACvBR,KAAK,EAAE,OAAO;QACZC,GAAG,EAAE,QADO;QAEZQ,MAAM,EAAE,QAFI;QAGZP,WAAW,EAAE;MAHD,CAAP,CADgB;MAMvBQ,eAAe,EAAE,CACf;QAAEC,IAAI,EAAE;MAAR,CADe,EAEf;QAAEA,IAAI,EAAE,WAAR;QAAqBC,EAAE,EAAE;MAAzB,CAFe,EAGf;QAAED,IAAI,EAAE,YAAR;QAAsBC,EAAE,EAAE;MAA1B,CAHe;IANM,CAAjB,CATe;IAqBvBC,MAAM,EAAEf,OAAO,CAACU,QAAR,CAAiB;MACvBR,KAAK,EAAGc,IAAD,KAAW;QAChBb,GAAG,EAAG,eADU;QAEhBQ,MAAM,EAAE,MAFQ;QAGhBK,IAHgB;QAIhBZ,WAAW,EAAE,SAJG;QAKhBa,OAAO,EAAE;UACP,gBAAgB;QADT;MALO,CAAX,CADgB;MAUvBL,eAAe,EAAE,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB;IAVM,CAAjB,CArBe;IAiCvBM,KAAK,EAAElB,OAAO,CAACU,QAAR,CAAiB;MACtBR,KAAK,EAAE,QAA4B;QAAA,IAA3B;UAAEiB,QAAF;UAAYC;QAAZ,CAA2B;QACjC,MAAMJ,IAAI,GAAG,IAAIK,QAAJ,EAAb;QACAL,IAAI,CAACM,MAAL,CAAY,UAAZ,EAAwBH,QAAxB;QACAH,IAAI,CAACM,MAAL,CAAY,UAAZ,EAAwBF,QAAxB;QACA,OAAO;UACLjB,GAAG,EAAG,QADD;UAELQ,MAAM,EAAE,MAFH;UAGLK,IAHK;UAILZ,WAAW,EAAE;QAJR,CAAP;MAMD,CAXqB;MAYtBQ,eAAe,EAAE,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB;IAZK,CAAjB,CAjCgB;IA+CvBW,sBAAsB,EAAEvB,OAAO,CAACE,KAAR,CAAc;MACpCA,KAAK,EAAE,OAAO;QACZC,GAAG,EAAG,uBADM;QAEZC,WAAW,EAAE;MAFD,CAAP,CAD6B;MAKpCI,YAAY,EAAE,CAAC,YAAD,CALsB;MAMpCH,iBAAiB,EAAGC,QAAD,IAAcA,QAAQ,CAACkB;IANN,CAAd,CA/CD;IAuDvBC,gBAAgB,EAAEzB,OAAO,CAACU,QAAR,CAAiB;MACjCR,KAAK,EAAGc,IAAD,KAAW;QAChBb,GAAG,EAAG,kBADU;QAEhBQ,MAAM,EAAE,MAFQ;QAGhBK,IAHgB;QAIhBZ,WAAW,EAAE,SAJG;QAKhBa,OAAO,EAAE;UACP,gBAAgB;QADT;MALO,CAAX,CAD0B;MAUjCL,eAAe,EAAE,CAAC,YAAD,EAAe,SAAf;IAVgB,CAAjB,CAvDK;IAmEvBc,gBAAgB,EAAE1B,OAAO,CAACU,QAAR,CAAiB;MACjCR,KAAK,EAAGyB,aAAD,KAAoB;QACzBxB,GAAG,EAAG,oBAAmBwB,aAAc,EADd;QAEzBhB,MAAM,EAAE,QAFiB;QAGzBP,WAAW,EAAE;MAHY,CAApB,CAD0B;MAMjCQ,eAAe,EAAE,CAAC,YAAD,EAAe,SAAf;IANgB,CAAjB,CAnEK;IA2EvBgB,gBAAgB,EAAE5B,OAAO,CAACU,QAAR,CAAiB;MACjCR,KAAK,EAAE;QAAA,IAAC;UAAEc,IAAF;UAAQW;QAAR,CAAD;QAAA,OAA8B;UACnCxB,GAAG,EAAG,oBAAmBwB,aAAc,EADJ;UAEnCX,IAFmC;UAGnCL,MAAM,EAAE,KAH2B;UAInCP,WAAW,EAAE;QAJsB,CAA9B;MAAA,CAD0B;MAOjCC,iBAAiB,EAAGC,QAAD,IAAcA,QAAQ,CAACkB,WAPT;MAQjCZ,eAAe,EAAE,CAAC,YAAD,EAAe,SAAf;IARgB,CAAjB,CA3EK;IAqFvBiB,aAAa,EAAE7B,OAAO,CAACE,KAAR,CAAc;MAC3BA,KAAK,EAAG4B,QAAD,KAAe;QACpB3B,GAAG,EAAG,sBAAqB2B,QAAS,EADhB;QAEpB1B,WAAW,EAAE;MAFO,CAAf;IADoB,CAAd,CArFQ;IA2FvB2B,UAAU,EAAE/B,OAAO,CAACE,KAAR,CAAc;MACxBA,KAAK,EAAE,OAAO;QACZC,GAAG,EAAE,oBADO;QAEZC,WAAW,EAAE;MAFD,CAAP,CADiB;MAKxBI,YAAY,EAAE,CAAC,SAAD,CALU;MAMxBH,iBAAiB,EAAGC,QAAD,IAAcA,QAAQ,CAAC0B;IANlB,CAAd,CA3FW;IAmGvBC,YAAY,EAAEjC,OAAO,CAACE,KAAR,CAAc;MAC1BA,KAAK,EAAE,OAAO;QACZC,GAAG,EAAE,qBADO;QAEZC,WAAW,EAAE;MAFD,CAAP,CADmB;MAK1BC,iBAAiB,EAAGC,QAAD,IAAcA,QAAQ,CAAC4B,SALhB;MAM1B1B,YAAY,EAAE,CAAC,WAAD;IANY,CAAd,CAnGS;IA2GvB0B,SAAS,EAAElC,OAAO,CAACU,QAAR,CAAiB;MAC1BR,KAAK,EAAGc,IAAD,KAAW;QAChBb,GAAG,EAAG,gBADU;QAEhBQ,MAAM,EAAE,MAFQ;QAGhBK,IAHgB;QAIhBZ,WAAW,EAAE,SAJG;QAKhBa,OAAO,EAAE;UACP,gBAAgB;QADT;MALO,CAAX,CADmB;MAU1BL,eAAe,EAAE,CAAC,WAAD,EAAc,SAAd;IAVS,CAAjB,CA3GY;IAuHvBuB,eAAe,EAAEnC,OAAO,CAACU,QAAR,CAAiB;MAChCR,KAAK,EAAGkC,WAAD,KAAkB;QACvBjC,GAAG,EAAG,kBAAiBiC,WAAY,EADZ;QAEvBzB,MAAM,EAAE,QAFe;QAGvBP,WAAW,EAAE;MAHU,CAAlB,CADyB;MAMhCQ,eAAe,EAAE,CAAC,WAAD,EAAc,SAAd;IANe,CAAjB,CAvHM;IA+HvByB,aAAa,EAAErC,OAAO,CAACE,KAAR,CAAc;MAC3BA,KAAK,EAAGoC,SAAD,KAAgB;QACrBnC,GAAG,EAAG,gBAAemC,SAAU,UADV;QAErBlC,WAAW,EAAE;MAFQ,CAAhB,CADoB;MAK3BC,iBAAiB,EAAGC,QAAD,IAAcA,QAAQ,CAACiC,OALf;MAM3B/B,YAAY,EAAE,CAAC,SAAD;IANa,CAAd,CA/HQ;IAuIvB+B,OAAO,EAAEvC,OAAO,CAACU,QAAR,CAAiB;MACxBR,KAAK,EAAE;QAAA,IAAC;UAAEc,IAAF;UAAQsB;QAAR,CAAD;QAAA,OAA0B;UAC/BnC,GAAG,EAAG,gBAAemC,SAAU,UADA;UAE/B3B,MAAM,EAAE,MAFuB;UAG/BK,IAH+B;UAI/BZ,WAAW,EAAE,SAJkB;UAK/Ba,OAAO,EAAE;YACP,gBAAgB;UADT;QALsB,CAA1B;MAAA,CADiB;MAUxBL,eAAe,EAAE,CAAC,SAAD;IAVO,CAAjB;EAvIc,CAAd;AAN0B,CAAD,CAA/B;AA4JP,OAAO,MAAM;EACX4B,kBADW;EAEXC,iBAFW;EAGXC,gBAHW;EAIXC,iBAJW;EAKXC,8BALW;EAMXC,2BANW;EAOXC,2BAPW;EAQXC,2BARW;EASXC,qBATW;EAUXC,kBAVW;EAWXC,oBAXW;EAYXC,oBAZW;EAaXC,0BAbW;EAcXC,kBAdW;EAeXC;AAfW,IAgBT/D,aAhBG"},"metadata":{},"sourceType":"module"}