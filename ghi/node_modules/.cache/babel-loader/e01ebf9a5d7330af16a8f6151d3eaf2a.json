{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const recipeHuntApi = createApi({\n  reducerPath: 'recipeHuntApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: process.env.REACT_APP_API_HOST\n  }),\n  endpoints: builder => ({\n    getAccount: builder.query({\n      query: () => ({\n        url: `/token`,\n        credentials: 'include'\n      }),\n      transformResponse: response => response ? response.account : null,\n      providesTags: ['Account']\n    }),\n    logout: builder.mutation({\n      query: () => ({\n        url: '/token',\n        method: 'DELETE',\n        credentials: 'include'\n      }),\n      invalidatesTags: ['Account']\n    }),\n    signup: builder.mutation({\n      query: body => ({\n        url: `${process.env.REACT_APP_API_HOST}/api/accounts`,\n        method: 'POST',\n        body,\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }),\n      invalidatesTags: ['Account']\n    }),\n    login: builder.mutation({\n      query: _ref => {\n        let {\n          username,\n          password\n        } = _ref;\n        const body = new FormData();\n        body.append('username', username);\n        body.append('password', password);\n        return {\n          url: `/token`,\n          method: 'POST',\n          body,\n          credentials: 'include'\n        };\n      },\n      invalidatesTags: ['Account']\n    }),\n    getIngredientByAccount: builder.query({\n      query: () => ({\n        url: `/api/ingredients/mine`,\n        credentials: \"include\"\n      }),\n      providesTags: [\"Ingredient\"],\n      transformResponse: response => response.ingredients\n    }),\n    createIngredient: builder.mutation({\n      query: body => ({\n        url: `/api/ingredients`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n      invalidatesTags: [\"Ingredient\"]\n    }),\n    deleteIngredient: builder.mutation({\n      query: ingredient_id => ({\n        url: `/api/ingredients/${ingredient_id}`,\n        method: \"DELETE\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"Ingredient\"]\n    }),\n    updateIngredient: builder.mutation({\n      query: _ref2 => {\n        let {\n          body: body,\n          ingredient_id: ingredient_id\n        } = _ref2;\n        return {\n          url: `/api/ingredients/${ingredient_id}`,\n          body,\n          method: \"PUT\",\n          credentials: \"include\"\n        };\n      },\n      transformResponse: response => response.ratings,\n      invalidatesTags: [\"Ingredient\"]\n    }),\n    getRecipeById: builder.query({\n      query: recipeId => ({\n        url: `/api/tasty-recipes/${recipeId}`,\n        credentials: \"include\"\n      })\n    }),\n    getRecipes: builder.query({\n      query: () => ({\n        url: \"/api/tasty-recipes\",\n        credentials: \"include\"\n      })\n    }),\n    getFavorites: builder.query({\n      query: () => ({\n        url: \"/api/favorites/mine\",\n        credentials: \"include\"\n      }),\n      transformResponse: response => response.favorites,\n      providesTags: [\"Favorites\"]\n    }),\n    favorites: builder.mutation({\n      query: body => ({\n        url: `/api/favorites`,\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n      invalidatesTags: [\"Favorites\"]\n    }),\n    deleteFavorites: builder.mutation({\n      query: favorite_id => ({\n        url: `/api/favorites/${favorite_id}`,\n        method: \"DELETE\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"Favorites\"]\n    }),\n    getAllRatings: builder.query({\n      query: recipe_id => ({\n        url: `/api/recipes/${recipe_id}/ratings`,\n        credentials: \"include\"\n      }),\n      transformResponse: response => response.ratings,\n      providesTags: [\"Ratings\"]\n    }),\n    ratings: builder.mutation({\n      query: _ref3 => {\n        let {\n          body: body,\n          recipe_id: recipe_id\n        } = _ref3;\n        return {\n          url: `/api/recipes/${recipe_id}/ratings`,\n          method: \"POST\",\n          body,\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        };\n      },\n      invalidatesTags: [\"Ratings\"]\n    })\n  })\n});\nexport const {\n  useGetAccountQuery,\n  useLogoutMutation,\n  useLoginMutation,\n  useSignupMutation,\n  useGetIngredientByAccountQuery,\n  useCreateIngredientMutation,\n  useDeleteIngredientMutation,\n  useUpdateIngredientMutation,\n  useGetRecipeByIdQuery,\n  useGetRecipesQuery,\n  useGetFavoritesQuery,\n  useFavoritesMutation,\n  useDeleteFavoritesMutation,\n  useRatingsMutation,\n  useGetAllRatingsQuery\n} = recipeHuntApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","recipeHuntApi","reducerPath","baseQuery","baseUrl","process","env","REACT_APP_API_HOST","endpoints","builder","getAccount","query","url","credentials","transformResponse","response","account","providesTags","logout","mutation","method","invalidatesTags","signup","body","headers","login","username","password","FormData","append","getIngredientByAccount","ingredients","createIngredient","deleteIngredient","ingredient_id","updateIngredient","ratings","getRecipeById","recipeId","getRecipes","getFavorites","favorites","deleteFavorites","favorite_id","getAllRatings","recipe_id","useGetAccountQuery","useLogoutMutation","useLoginMutation","useSignupMutation","useGetIngredientByAccountQuery","useCreateIngredientMutation","useDeleteIngredientMutation","useUpdateIngredientMutation","useGetRecipeByIdQuery","useGetRecipesQuery","useGetFavoritesQuery","useFavoritesMutation","useDeleteFavoritesMutation","useRatingsMutation","useGetAllRatingsQuery"],"sources":["/app/src/app/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const recipeHuntApi = createApi({\n    reducerPath: 'recipeHuntApi',\n    baseQuery: fetchBaseQuery({\n        baseUrl: process.env.REACT_APP_API_HOST\n    }),\n    endpoints: (builder) => ({\n        getAccount: builder.query({\n            query: () => ({\n                url: `/token`,\n                credentials: 'include',\n            }),\n            transformResponse: (response) => response ? response.account : null,\n            providesTags: ['Account']\n        }),\n        logout: builder.mutation({\n            query: () => ({\n                url: '/token',\n                method: 'DELETE',\n                credentials: 'include'\n            }),\n            invalidatesTags: ['Account']\n        }),\n        signup: builder.mutation({\n            query: (body) => ({\n                url: `${process.env.REACT_APP_API_HOST}/api/accounts`,\n                method: 'POST',\n                body,\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }),\n            invalidatesTags: ['Account']\n        }),\n        login: builder.mutation({\n            query: ({username, password}) => {\n                const body = new FormData();\n                body.append('username', username);\n                body.append('password', password);\n                return {\n                    url: `/token`,\n                    method: 'POST',\n                    body,\n                    credentials: 'include'\n                }\n            },\n            invalidatesTags: ['Account']\n        }),\n        getIngredientByAccount: builder.query({\n            query: () => ({\n              url: `/api/ingredients/mine`,\n              credentials: \"include\",\n            }),\n            providesTags: [\"Ingredient\"],\n            transformResponse: (response) => response.ingredients,\n          }),\n          createIngredient: builder.mutation({\n            query: (body) => ({\n              url: `/api/ingredients`,\n              method: \"POST\",\n              body,\n              credentials: \"include\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n            }),\n            invalidatesTags: [\"Ingredient\"],\n          }),\n          deleteIngredient: builder.mutation({\n            query: (ingredient_id) => ({\n              url: `/api/ingredients/${ingredient_id}`,\n              method: \"DELETE\",\n              credentials: \"include\",\n            }),\n            invalidatesTags: [\"Ingredient\"],\n          }),\n          updateIngredient: builder.mutation({\n            query: ({ body: body, ingredient_id: ingredient_id }) => ({\n              url: `/api/ingredients/${ingredient_id}`,\n              body,\n              method: \"PUT\",\n              credentials: \"include\",\n            }),\n            transformResponse: (response) => response.ratings,\n            invalidatesTags: [\"Ingredient\"],\n          }),\n          getRecipeById: builder.query({\n            query: (recipeId) => ({\n                url: `/api/tasty-recipes/${recipeId}`,\n                credentials: \"include\",\n            }),\n        }),\n        getRecipes: builder.query({\n            query: () => ({\n                url: \"/api/tasty-recipes\",\n                credentials: \"include\",\n            }),\n        }),\n        getFavorites: builder.query({\n            query: () => ({\n                url: \"/api/favorites/mine\",\n                credentials: \"include\",\n            }),\n            transformResponse: (response) => response.favorites,\n            providesTags: [\"Favorites\"],\n        }),\n        favorites: builder.mutation({\n            query: (body) => ({\n                url: `/api/favorites`,\n                method: \"POST\",\n                body,\n                credentials: \"include\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            }),\n            invalidatesTags: [\"Favorites\"],\n        }),\n        deleteFavorites: builder.mutation({\n            query: (favorite_id) => ({\n                url: `/api/favorites/${favorite_id}`,\n                method: \"DELETE\",\n                credentials: \"include\",\n            }),\n            invalidatesTags: [\"Favorites\"],\n        }),\n        getAllRatings: builder.query({\n            query: (recipe_id) => ({\n                url: `/api/recipes/${recipe_id}/ratings`,\n                credentials: \"include\",\n            }),\n            transformResponse: (response) => response.ratings,\n            providesTags: [\"Ratings\"],\n        }),\n        ratings: builder.mutation({\n            query: ({body: body, recipe_id: recipe_id}) => ({\n                url: `/api/recipes/${recipe_id}/ratings`,\n                method: \"POST\",\n                body,\n                credentials: \"include\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            }),\n            invalidatesTags: [\"Ratings\"],\n        }),\n    })\n})\n\nexport const {\n    useGetAccountQuery,\n    useLogoutMutation,\n    useLoginMutation,\n    useSignupMutation,\n    useGetIngredientByAccountQuery,\n    useCreateIngredientMutation,\n    useDeleteIngredientMutation,\n    useUpdateIngredientMutation,\n    useGetRecipeByIdQuery,\n    useGetRecipesQuery,\n    useGetFavoritesQuery,\n    useFavoritesMutation,\n    useDeleteFavoritesMutation,\n    useRatingsMutation,\n    useGetAllRatingsQuery,\n} = recipeHuntApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}