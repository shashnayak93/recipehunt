"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuthContext = exports.AuthProvider = exports.AuthContext = exports.getToken = void 0;
const react_1 = __importStar(require("react"));
/**
 * Gets token from API using cookie as credential
 * @internal
 */
const getToken = (baseUrl) => __awaiter(void 0, void 0, void 0, function* () {
    return fetch(`${baseUrl}/token`, {
        credentials: "include",
    })
        .then((response) => response.json())
        .then((data) => { var _a; return (_a = data === null || data === void 0 ? void 0 : data.access_token) !== null && _a !== void 0 ? _a : null; })
        .catch(console.error);
});
exports.getToken = getToken;
/**
 * Context Hook for authentication. Store token and other
 * data.
 * @public
 */
exports.AuthContext = (0, react_1.createContext)({
    token: null,
    setToken: () => null,
    baseUrl: "",
});
/**
 * React context provider that provides AuthContext to
 * application, which should be a child node of this component.
 * @param props - Children and optionally URL to retrieve API
 * token.
 * @public
 */
const AuthProvider = (props) => {
    const [token, setToken] = (0, react_1.useState)(null);
    const { children, baseUrl } = props;
    return (react_1.default.createElement(exports.AuthContext.Provider, { value: { token, setToken, baseUrl } },
        react_1.default.createElement(TokenNode, null),
        children));
};
exports.AuthProvider = AuthProvider;
/**
 * Context Hook.
 * @public
 */
const useAuthContext = () => (0, react_1.useContext)(exports.AuthContext);
exports.useAuthContext = useAuthContext;
/**
 * Hook that provides token, register, login, logout,
 * fetchWithCookie, and fetchWithToken
 * @public
 */
const useToken = () => {
    const { token, setToken, baseUrl } = (0, exports.useAuthContext)();
    (0, react_1.useEffect)(() => {
        const fetchToken = () => __awaiter(void 0, void 0, void 0, function* () {
            const token = yield (0, exports.getToken)(baseUrl);
            setToken(token);
        });
        if (!token) {
            fetchToken();
        }
    }, [setToken]);
    /**
     * Logs out and deletes token state, then deletes token and
     * navigates to '/'.
     */
    const logout = () => __awaiter(void 0, void 0, void 0, function* () {
        if (token) {
            const url = `${baseUrl}/token`;
            fetch(url, { method: "delete", credentials: "include" })
                .then(() => {
                setToken(null);
                // Delete old token
                document.cookie =
                    "fastapi_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
            })
                .catch(console.error);
        }
    });
    /**
     * Login to set API token.
     * @param username - Username of existing account
     * @param password - Password of existing account
     */
    const login = (username, password) => __awaiter(void 0, void 0, void 0, function* () {
        const url = `${baseUrl}/token`;
        const form = new FormData();
        form.append("username", username);
        form.append("password", password);
        fetch(url, {
            method: "post",
            credentials: "include",
            body: form,
        })
            .then(() => (0, exports.getToken)(baseUrl))
            .then((token) => {
            if (token) {
                setToken(token);
            }
            else {
                throw new Error(`Failed to get token after login. Got ${token}`);
            }
        })
            .catch(console.error);
    });
    /**
     * Register user account with API service. Logs in after
     * registration.
     * @param userData - Account data to be created or updated.
     * @param url - API endpoint to update or create account.
     * @param method - Method to use in request.
     */
    const register = (userData, url, method = "POST") => __awaiter(void 0, void 0, void 0, function* () {
        fetch(url, {
            method: method,
            body: JSON.stringify(userData),
            headers: {
                "Content-Type": "application/json",
            },
        })
            .then(() => login(userData.username, userData.password))
            .catch(console.error);
    });
    /**
     * Get data from service that provided login token. Use
     * this with your account service.
     * @param url - API endpoint to request
     * @param method - Method to use in request.
     * @param options - Additional options to use in fetch
     * request. For more information, see
     * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options
     */
    const fetchWithCookie = (url, method = "GET", options = {}) => __awaiter(void 0, void 0, void 0, function* () {
        return fetch(url, Object.assign({ method: method, credentials: "include" }, options))
            .then((resp) => resp.json())
            .catch(console.error);
    });
    /**
     * Get data from service that provided login token. Use
     * this with APIs other than the account service.
     * @param url - API endpoint to request
     * @param method - Method to use in request.
     * @param options - Additional options to use in fetch
     * request. For more information, see
     * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options
     */
    const fetchWithToken = (url, method = "GET", otherHeaders = {}, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
        return fetch(url, Object.assign({ method: method, headers: Object.assign({ Authorization: `Bearer ${token}` }, otherHeaders) }, options))
            .then((resp) => resp.json())
            .catch(console.error);
    });
    return { token, register, login, logout, fetchWithCookie, fetchWithToken };
};
exports.default = useToken;
const TokenNode = () => {
    useToken();
    return null;
};
