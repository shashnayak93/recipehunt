import { Dispatch } from 'react';
import { default as React_2 } from 'react';
import { ReactNode } from 'react';
import { SetStateAction } from 'react';

/**
 * Context Hook for authentication. Store token and other
 * data.
 * @public
 */
export declare const AuthContext: React_2.Context<AuthContextType>;

/**
 * Object containing the state of AuthContext. This is
 * returned by useAuthContext and is useful to retrieve the
 * token provided by the backend.
 * @public
 */
export declare type AuthContextType = {
    token: string | null;
    setToken: Dispatch<SetStateAction<string | null>>;
    baseUrl: string;
};

/**
 * React context provider that provides AuthContext to
 * application, which should be a child node of this component.
 * @param props - Children and optionally URL to retrieve API
 * token.
 * @public
 */
export declare const AuthProvider: (props: AuthProviderProps) => JSX.Element;

/**
 *
 */
declare interface AuthProviderProps {
    children: ReactNode;
    baseUrl: string;
}

/**
 * Gets token from API using cookie as credential
 * @internal
 */
export declare const getToken: (baseUrl: string) => Promise<string>;

declare interface LoginInterface {
    username: string;
    password: string;
}

declare type RegistrationData = LoginInterface | any;

/**
 * Context Hook.
 * @public
 */
export declare const useAuthContext: () => AuthContextType;

/**
 * Hook that provides token, register, login, logout,
 * fetchWithCookie, and fetchWithToken
 * @public
 */
declare const useToken: () => {
    token: string | null;
    register: (userData: RegistrationData, url: string, method?: string) => Promise<void>;
    login: (username: string, password: string) => Promise<void>;
    logout: () => Promise<void>;
    fetchWithCookie: (url: string, method?: string, options?: object) => Promise<any>;
    fetchWithToken: (url: string, method?: string, otherHeaders?: object, options?: object) => Promise<any>;
};
export default useToken;

export { }
